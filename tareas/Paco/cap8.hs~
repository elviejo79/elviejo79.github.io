type Set a = [a]

normalForm :: (Eq a, Show a) => [a] -> Bool
normalForm [] = True
normalForm (x:xs) = if (elem x xs) then False xs else normalForm xs
normalForm x = True

normalizeSet :: Eq a => Set a -> Set a
normalizeSet [] = []
normalizeSet (x:xs) = if (elem x xs) then normalizeSet xs else x:normalizeSet xs

--Union
(+++) :: (Eq a, Show a, Ord a) => Set a -> Set a -> Set a
(+++) xs (y:ys) = if y elem xs then [xs:y] else (+++) xs ys
(+++) xs [] = xs

difference :: Eq a => Set a -> Set a -> Set a
differemce :: 