#+title: projectional_editing

* Problem

As we have established before [[Awesome-text-to-multimedia]].
I like to create using sipmle text (as you do with plantuml).
But then I like the creation to be somethnig visual as an image.

The problem is that the Text and the Representation are *different* things
They represent the same information, but look different.

And as any software developer knows having the same information in two places
is a "Bad Idea" (tm) violating the [[Dry Principle]].

* Direction of the solution
So a solution for me should be something like:

** Views on a database
   A database table can have multiple views
   i.e. it displays a subset of the information
   but it's still the same information!

** Air flex
Air flex was a nice technology, it was used to produce web apps.
It compiled the apps to Flash technology, and Flash was killed by Steve Jobs
by not including it on the iphone.

The nice thing about flex is that was a text representation (in XML, not pretty)
and a visual represenation. When one changed the visual representation it changed the xml

** Docbook and Asciidoc
Docbook is an XML standard, that is used to edit documents such as books.
The advantage is that there are tools (lyx) that can process it to create a fully formed book.
However it's disadvantage was that writting xml by hand was a horrible.
So much so that XML became known first as: humand writable but later,
it was said that XML was only for computers to use and humans to interpret.

Asciidoc is a simplier format (looks like markdown) however it's 100% compatible with docbook.
This makes it possible to write documents in plain text (dockbook) and then compile (translate)
to Docbook and use all the tools.

** XML vs JSON
I hated XML, it always seemed to complex for what it was the information displayed was always to much information for such a little text.
Plus all the validators and schemas seemed like an unnecessary complication.
Plus it was *too* flexible at the same time.
Should a subproperty be represented as child node or as property of the element?
/How wrong I was!/

In the beginning json seemed like a breath of fresh air.
A lot less verbose, besides all the "extra stuff" (I mean "{" brackets) was justified because it was necessary
since json was an ascii represantation of a javascript object.
You had a way to navigate the tree that was part of the programming language!

However later we discovered that:
a) json had the same complication should a subproperty be representad as nest or plain?!
b) the scheme in XML where actually necessary! because in Json for expample a field "telephone" is expecting an integer? or a string of the form "492-123-1234"
c) searching inside json was a mess of navigating properties and again non standard see the "search language" of [[jQ]]

So turns out that disliked the *syntax* of xml, but not it's *semantics*.
I mean it *looked* ugly but it worked very well.

by the way this was the same "error" I made with [[java vs strongyl typed]]

** XML vs JSON vs YAML
YAML improves over JSON in one important, to me, aspect it uses spaces as meaningful for the data structure.
Why? because by making whitespace mandatory, there is more meannig in the same space and less things to argue abuout
Being strict even with the format is something I appreciate like.
Ken Arnold said on his essay [[Style is substance]] where he advocates to use the code style as part of the compiler

** In my mind everything is a graph

I think in terms of nodes and links between them.
So when I discovered Neo4j I saw that was the correct data represenation for the world.

*** Sqlite
#+begin_quote
Sqlite is a replacemnet of a text file, not oracle
#+end_quote

What that means is that Sqlite should be used as a datafile with all the advantages of

* Vision
So what I want is:
#+begin_quote
A format that can represent the information in different media (at least text and chart, like plantuml),
That has all the tools of XML
That looks like Yaml or whatever.
Probably is like an embeded database, like sqlite but is in fact a graph.

#+end_quote

* Does such a thing exist?
Turns out it does and is called *projectional editing*!

** Projectional editing
Is the idea of an editor where the information looks different depending on the angle you are watching.
So each representation is in fact a *projection* of what the concepts.

** MPS
   For example in the following image you can see MPS a projectional editor looking at the same code in different views:
   - As text
   - As graph
   - As table!
   And everythnig is in fact saved as an XML file.


   [[file:mps_demo.jpg][MPS a practical projectional editor]]

*** Things I like about MPS

+ Has over 10 years of development on it.
+ It's sponsored by a company JetBrains
+ It's Apache licensed

- It's too focused on DSL, and not simple reipmelementations of the laguages that already exist.
- not enough examples of reimplemnetations.

** [[https://cloudalion.org/2016/05/29/whats-the-deal-with-projectional-editing/][Cedalion]]

Its a PhD thesis... that makes sense

* Experiments
Things that I would like to do with this technology.

** JSON
If we had a projectional de JSON, then we could have version of it that is XML.
And since it would be XML it would be possible to use schema validator, xpath, and xml databases.

** Reimplement the Real-Time Object-Oriented modeling language.
Just like they did with [[https://www.eclipse.org/etrice/][eTrice]]. But in this one of the projectios would be the source that looks like the same language.
Another projection would be the code to implement the state machines in elixir
Another projection would be the code to implemnet the machines as Nix language to deploy an architecture.

** Reimplemnet PlantUML
One of the projections would be source code and the other obivously the diagram.

** Reimplement flyinglogic
as a textual language that has a representation.

** Remiplemnet VUE (Visual understanding envorinment)
In VUE one of the views is a Graph another view is like slides.
[[https://78fda818-a-62cb3a1a-s-sites.googlegroups.com/site/venusiconography/home/connectivity-maps/VUE.jpg?attachauth=ANoY7cryA2dzh24lFCwwPt5PBs5-dS3FjRXiN9RIFrlJa4UD6hTHBZv9KN7m2L4uKk57QjuxdAMxKLffCPxDMFwsMZoPIYH_d7C66SJyW2HUmOWcSbzmg0mohVN4gUEJg2Wzu4yb-pue4AdUlj4HvPMn66cwv2A0i-MeozfvcWWQohcVLLN4oq5BR9vkUpCD8E-fdWWXiovpgPQq7eqcrcIsM9N18ckgg0quoAUjt7eoar70IWXPHv4IR451cbz40_c7xfqrmfi4&attredirects=0]]

This I like but I prefer to combine the two views like in:
[[https://storymap.knightlab.com/examples/aryas-journey/][Arya's journey]]

** Implement a state machine language for smart contracts.
